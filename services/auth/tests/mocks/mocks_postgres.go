// Code generated by MockGen. DO NOT EDIT.
// Source: postgres.go
//
// Generated by this command:
//
//	mockgen -source=postgres.go -destination=../../../../tests/mocks/mocks_postgres.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	postgres_repos "github.com/modulix-systems/goose-talk/internal/gateways/storage/postgres"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryable is a mock of Queryable interface.
type MockQueryable struct {
	ctrl     *gomock.Controller
	recorder *MockQueryableMockRecorder
	isgomock struct{}
}

// MockQueryableMockRecorder is the mock recorder for MockQueryable.
type MockQueryableMockRecorder struct {
	mock *MockQueryable
}

// NewMockQueryable creates a new mock instance.
func NewMockQueryable(ctrl *gomock.Controller) *MockQueryable {
	mock := &MockQueryable{ctrl: ctrl}
	mock.recorder = &MockQueryableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryable) EXPECT() *MockQueryableMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockQueryable) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockQueryableMockRecorder) Exec(ctx, sql any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryable)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockQueryable) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryableMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryable)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockQueryable) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockQueryableMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockQueryable)(nil).QueryRow), varargs...)
}

// MockSupportsAcquire is a mock of SupportsAcquire interface.
type MockSupportsAcquire struct {
	ctrl     *gomock.Controller
	recorder *MockSupportsAcquireMockRecorder
	isgomock struct{}
}

// MockSupportsAcquireMockRecorder is the mock recorder for MockSupportsAcquire.
type MockSupportsAcquireMockRecorder struct {
	mock *MockSupportsAcquire
}

// NewMockSupportsAcquire creates a new mock instance.
func NewMockSupportsAcquire(ctrl *gomock.Controller) *MockSupportsAcquire {
	mock := &MockSupportsAcquire{ctrl: ctrl}
	mock.recorder = &MockSupportsAcquireMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupportsAcquire) EXPECT() *MockSupportsAcquireMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockSupportsAcquire) Acquire(ctx context.Context) (postgres_repos.Queryable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(postgres_repos.Queryable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockSupportsAcquireMockRecorder) Acquire(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockSupportsAcquire)(nil).Acquire), ctx)
}
