// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=../../tests/mocks/mocks_gateways.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/modulix-systems/goose-talk/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
	isgomock struct{}
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// CheckExistsWithEmail mocks base method.
func (m *MockUsersRepo) CheckExistsWithEmail(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsWithEmail", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsWithEmail indicates an expected call of CheckExistsWithEmail.
func (mr *MockUsersRepoMockRecorder) CheckExistsWithEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsWithEmail", reflect.TypeOf((*MockUsersRepo)(nil).CheckExistsWithEmail), ctx, email)
}

// Insert mocks base method.
func (m *MockUsersRepo) Insert(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersRepoMockRecorder) Insert(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersRepo)(nil).Insert), ctx, user)
}

// MockSignUpCodeRepo is a mock of SignUpCodeRepo interface.
type MockSignUpCodeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpCodeRepoMockRecorder
	isgomock struct{}
}

// MockSignUpCodeRepoMockRecorder is the mock recorder for MockSignUpCodeRepo.
type MockSignUpCodeRepoMockRecorder struct {
	mock *MockSignUpCodeRepo
}

// NewMockSignUpCodeRepo creates a new mock instance.
func NewMockSignUpCodeRepo(ctrl *gomock.Controller) *MockSignUpCodeRepo {
	mock := &MockSignUpCodeRepo{ctrl: ctrl}
	mock.recorder = &MockSignUpCodeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpCodeRepo) EXPECT() *MockSignUpCodeRepoMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockSignUpCodeRepo) GetByEmail(ctx context.Context, email string) (*entity.SignUpCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.SignUpCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockSignUpCodeRepoMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockSignUpCodeRepo)(nil).GetByEmail), ctx, email)
}

// Insert mocks base method.
func (m *MockSignUpCodeRepo) Insert(ctx context.Context, code *entity.SignUpCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSignUpCodeRepoMockRecorder) Insert(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSignUpCodeRepo)(nil).Insert), ctx, code)
}

// MockAuthTokenProvider is a mock of AuthTokenProvider interface.
type MockAuthTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTokenProviderMockRecorder
	isgomock struct{}
}

// MockAuthTokenProviderMockRecorder is the mock recorder for MockAuthTokenProvider.
type MockAuthTokenProviderMockRecorder struct {
	mock *MockAuthTokenProvider
}

// NewMockAuthTokenProvider creates a new mock instance.
func NewMockAuthTokenProvider(ctrl *gomock.Controller) *MockAuthTokenProvider {
	mock := &MockAuthTokenProvider{ctrl: ctrl}
	mock.recorder = &MockAuthTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthTokenProvider) EXPECT() *MockAuthTokenProviderMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockAuthTokenProvider) NewToken(expires time.Duration, claims map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", expires, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockAuthTokenProviderMockRecorder) NewToken(expires, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockAuthTokenProvider)(nil).NewToken), expires, claims)
}

// ParseClaimsFromToken mocks base method.
func (m *MockAuthTokenProvider) ParseClaimsFromToken(token string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaimsFromToken", token)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaimsFromToken indicates an expected call of ParseClaimsFromToken.
func (mr *MockAuthTokenProviderMockRecorder) ParseClaimsFromToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaimsFromToken", reflect.TypeOf((*MockAuthTokenProvider)(nil).ParseClaimsFromToken), token)
}

// MockSecurityProvider is a mock of SecurityProvider interface.
type MockSecurityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityProviderMockRecorder
	isgomock struct{}
}

// MockSecurityProviderMockRecorder is the mock recorder for MockSecurityProvider.
type MockSecurityProviderMockRecorder struct {
	mock *MockSecurityProvider
}

// NewMockSecurityProvider creates a new mock instance.
func NewMockSecurityProvider(ctrl *gomock.Controller) *MockSecurityProvider {
	mock := &MockSecurityProvider{ctrl: ctrl}
	mock.recorder = &MockSecurityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityProvider) EXPECT() *MockSecurityProviderMockRecorder {
	return m.recorder
}

// NewSecureToken mocks base method.
func (m *MockSecurityProvider) NewSecureToken(len int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSecureToken", len)
	ret0, _ := ret[0].(string)
	return ret0
}

// NewSecureToken indicates an expected call of NewSecureToken.
func (mr *MockSecurityProviderMockRecorder) NewSecureToken(len any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSecureToken", reflect.TypeOf((*MockSecurityProvider)(nil).NewSecureToken), len)
}

// MockNotificationsService is a mock of NotificationsService interface.
type MockNotificationsService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsServiceMockRecorder
	isgomock struct{}
}

// MockNotificationsServiceMockRecorder is the mock recorder for MockNotificationsService.
type MockNotificationsServiceMockRecorder struct {
	mock *MockNotificationsService
}

// NewMockNotificationsService creates a new mock instance.
func NewMockNotificationsService(ctrl *gomock.Controller) *MockNotificationsService {
	mock := &MockNotificationsService{ctrl: ctrl}
	mock.recorder = &MockNotificationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsService) EXPECT() *MockNotificationsServiceMockRecorder {
	return m.recorder
}

// SendSignUpConfirmationEmail mocks base method.
func (m *MockNotificationsService) SendSignUpConfirmationEmail(ctx context.Context, to, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignUpConfirmationEmail", ctx, to, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSignUpConfirmationEmail indicates an expected call of SendSignUpConfirmationEmail.
func (mr *MockNotificationsServiceMockRecorder) SendSignUpConfirmationEmail(ctx, to, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignUpConfirmationEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendSignUpConfirmationEmail), ctx, to, code)
}
