// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=../../tests/mocks/mocks_gateways.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/modulix-systems/goose-talk/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
	isgomock struct{}
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// CheckExistsWithEmail mocks base method.
func (m *MockUsersRepo) CheckExistsWithEmail(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsWithEmail", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsWithEmail indicates an expected call of CheckExistsWithEmail.
func (mr *MockUsersRepoMockRecorder) CheckExistsWithEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsWithEmail", reflect.TypeOf((*MockUsersRepo)(nil).CheckExistsWithEmail), ctx, email)
}

// GetByLogin mocks base method.
func (m *MockUsersRepo) GetByLogin(ctx context.Context, login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUsersRepoMockRecorder) GetByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUsersRepo)(nil).GetByLogin), ctx, login)
}

// Insert mocks base method.
func (m *MockUsersRepo) Insert(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersRepoMockRecorder) Insert(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersRepo)(nil).Insert), ctx, user)
}

// UpdateIsActiveById mocks base method.
func (m *MockUsersRepo) UpdateIsActiveById(ctx context.Context, userId string, isActive bool) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsActiveById", ctx, userId, isActive)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIsActiveById indicates an expected call of UpdateIsActiveById.
func (mr *MockUsersRepoMockRecorder) UpdateIsActiveById(ctx, userId, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsActiveById", reflect.TypeOf((*MockUsersRepo)(nil).UpdateIsActiveById), ctx, userId, isActive)
}

// MockUserSessionsRepo is a mock of UserSessionsRepo interface.
type MockUserSessionsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserSessionsRepoMockRecorder
	isgomock struct{}
}

// MockUserSessionsRepoMockRecorder is the mock recorder for MockUserSessionsRepo.
type MockUserSessionsRepoMockRecorder struct {
	mock *MockUserSessionsRepo
}

// NewMockUserSessionsRepo creates a new mock instance.
func NewMockUserSessionsRepo(ctrl *gomock.Controller) *MockUserSessionsRepo {
	mock := &MockUserSessionsRepo{ctrl: ctrl}
	mock.recorder = &MockUserSessionsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSessionsRepo) EXPECT() *MockUserSessionsRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserSessionsRepo) Delete(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserSessionsRepoMockRecorder) Delete(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserSessionsRepo)(nil).Delete), ctx, ip)
}

// GetAllForUser mocks base method.
func (m *MockUserSessionsRepo) GetAllForUser(ctx context.Context, userId string, activeOnly bool) ([]entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", ctx, userId, activeOnly)
	ret0, _ := ret[0].([]entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser.
func (mr *MockUserSessionsRepoMockRecorder) GetAllForUser(ctx, userId, activeOnly any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*MockUserSessionsRepo)(nil).GetAllForUser), ctx, userId, activeOnly)
}

// GetByToken mocks base method.
func (m *MockUserSessionsRepo) GetByToken(ctx context.Context, token string) (*entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByToken", ctx, token)
	ret0, _ := ret[0].(*entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken.
func (mr *MockUserSessionsRepoMockRecorder) GetByToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockUserSessionsRepo)(nil).GetByToken), ctx, token)
}

// Insert mocks base method.
func (m *MockUserSessionsRepo) Insert(ctx context.Context, session *entity.UserSession) (*entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, session)
	ret0, _ := ret[0].(*entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUserSessionsRepoMockRecorder) Insert(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserSessionsRepo)(nil).Insert), ctx, session)
}

// UpdateIsActiveById mocks base method.
func (m *MockUserSessionsRepo) UpdateIsActiveById(ctx context.Context, sessionId string, isActive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsActiveById", ctx, sessionId, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsActiveById indicates an expected call of UpdateIsActiveById.
func (mr *MockUserSessionsRepoMockRecorder) UpdateIsActiveById(ctx, sessionId, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsActiveById", reflect.TypeOf((*MockUserSessionsRepo)(nil).UpdateIsActiveById), ctx, sessionId, isActive)
}

// MockOtpRepo is a mock of OtpRepo interface.
type MockOtpRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOtpRepoMockRecorder
	isgomock struct{}
}

// MockOtpRepoMockRecorder is the mock recorder for MockOtpRepo.
type MockOtpRepoMockRecorder struct {
	mock *MockOtpRepo
}

// NewMockOtpRepo creates a new mock instance.
func NewMockOtpRepo(ctrl *gomock.Controller) *MockOtpRepo {
	mock := &MockOtpRepo{ctrl: ctrl}
	mock.recorder = &MockOtpRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpRepo) EXPECT() *MockOtpRepoMockRecorder {
	return m.recorder
}

// DeleteByEmail mocks base method.
func (m *MockOtpRepo) DeleteByEmail(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByEmail indicates an expected call of DeleteByEmail.
func (mr *MockOtpRepoMockRecorder) DeleteByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByEmail", reflect.TypeOf((*MockOtpRepo)(nil).DeleteByEmail), ctx, email)
}

// GetByEmail mocks base method.
func (m *MockOtpRepo) GetByEmail(ctx context.Context, email string) (*entity.OTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.OTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockOtpRepoMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockOtpRepo)(nil).GetByEmail), ctx, email)
}

// InsertOrUpdateCode mocks base method.
func (m *MockOtpRepo) InsertOrUpdateCode(ctx context.Context, otp *entity.OTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateCode", ctx, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateCode indicates an expected call of InsertOrUpdateCode.
func (mr *MockOtpRepoMockRecorder) InsertOrUpdateCode(ctx, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateCode", reflect.TypeOf((*MockOtpRepo)(nil).InsertOrUpdateCode), ctx, otp)
}

// MockAuthTokenProvider is a mock of AuthTokenProvider interface.
type MockAuthTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTokenProviderMockRecorder
	isgomock struct{}
}

// MockAuthTokenProviderMockRecorder is the mock recorder for MockAuthTokenProvider.
type MockAuthTokenProviderMockRecorder struct {
	mock *MockAuthTokenProvider
}

// NewMockAuthTokenProvider creates a new mock instance.
func NewMockAuthTokenProvider(ctrl *gomock.Controller) *MockAuthTokenProvider {
	mock := &MockAuthTokenProvider{ctrl: ctrl}
	mock.recorder = &MockAuthTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthTokenProvider) EXPECT() *MockAuthTokenProviderMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockAuthTokenProvider) NewToken(expires time.Duration, claims map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", expires, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockAuthTokenProviderMockRecorder) NewToken(expires, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockAuthTokenProvider)(nil).NewToken), expires, claims)
}

// ParseClaimsFromToken mocks base method.
func (m *MockAuthTokenProvider) ParseClaimsFromToken(token string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaimsFromToken", token)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaimsFromToken indicates an expected call of ParseClaimsFromToken.
func (mr *MockAuthTokenProviderMockRecorder) ParseClaimsFromToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaimsFromToken", reflect.TypeOf((*MockAuthTokenProvider)(nil).ParseClaimsFromToken), token)
}

// MockSecurityProvider is a mock of SecurityProvider interface.
type MockSecurityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityProviderMockRecorder
	isgomock struct{}
}

// MockSecurityProviderMockRecorder is the mock recorder for MockSecurityProvider.
type MockSecurityProviderMockRecorder struct {
	mock *MockSecurityProvider
}

// NewMockSecurityProvider creates a new mock instance.
func NewMockSecurityProvider(ctrl *gomock.Controller) *MockSecurityProvider {
	mock := &MockSecurityProvider{ctrl: ctrl}
	mock.recorder = &MockSecurityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityProvider) EXPECT() *MockSecurityProviderMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockSecurityProvider) ComparePasswords(hashed []byte, plain string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashed, plain)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockSecurityProviderMockRecorder) ComparePasswords(hashed, plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockSecurityProvider)(nil).ComparePasswords), hashed, plain)
}

// GenerateOTPCode mocks base method.
func (m *MockSecurityProvider) GenerateOTPCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOTPCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateOTPCode indicates an expected call of GenerateOTPCode.
func (mr *MockSecurityProviderMockRecorder) GenerateOTPCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOTPCode", reflect.TypeOf((*MockSecurityProvider)(nil).GenerateOTPCode))
}

// GenerateTOTP mocks base method.
func (m *MockSecurityProvider) GenerateTOTP(secret string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTOTP", secret)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateTOTP indicates an expected call of GenerateTOTP.
func (mr *MockSecurityProviderMockRecorder) GenerateTOTP(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTOTP", reflect.TypeOf((*MockSecurityProvider)(nil).GenerateTOTP), secret)
}

// HashPassword mocks base method.
func (m *MockSecurityProvider) HashPassword(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockSecurityProviderMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockSecurityProvider)(nil).HashPassword), password)
}

// ValidateTOTP mocks base method.
func (m *MockSecurityProvider) ValidateTOTP(code, secret string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTOTP", code, secret)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateTOTP indicates an expected call of ValidateTOTP.
func (mr *MockSecurityProviderMockRecorder) ValidateTOTP(code, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTOTP", reflect.TypeOf((*MockSecurityProvider)(nil).ValidateTOTP), code, secret)
}

// MockNotificationsService is a mock of NotificationsService interface.
type MockNotificationsService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsServiceMockRecorder
	isgomock struct{}
}

// MockNotificationsServiceMockRecorder is the mock recorder for MockNotificationsService.
type MockNotificationsServiceMockRecorder struct {
	mock *MockNotificationsService
}

// NewMockNotificationsService creates a new mock instance.
func NewMockNotificationsService(ctrl *gomock.Controller) *MockNotificationsService {
	mock := &MockNotificationsService{ctrl: ctrl}
	mock.recorder = &MockNotificationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsService) EXPECT() *MockNotificationsServiceMockRecorder {
	return m.recorder
}

// Send2FAEmail mocks base method.
func (m *MockNotificationsService) Send2FAEmail(ctx context.Context, to, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send2FAEmail", ctx, to, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send2FAEmail indicates an expected call of Send2FAEmail.
func (mr *MockNotificationsServiceMockRecorder) Send2FAEmail(ctx, to, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send2FAEmail", reflect.TypeOf((*MockNotificationsService)(nil).Send2FAEmail), ctx, to, otp)
}

// SendAccDeactivationEmail mocks base method.
func (m *MockNotificationsService) SendAccDeactivationEmail(ctx context.Context, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAccDeactivationEmail", ctx, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAccDeactivationEmail indicates an expected call of SendAccDeactivationEmail.
func (mr *MockNotificationsServiceMockRecorder) SendAccDeactivationEmail(ctx, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAccDeactivationEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendAccDeactivationEmail), ctx, to)
}

// SendGreetingEmail mocks base method.
func (m *MockNotificationsService) SendGreetingEmail(ctx context.Context, to, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGreetingEmail", ctx, to, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendGreetingEmail indicates an expected call of SendGreetingEmail.
func (mr *MockNotificationsServiceMockRecorder) SendGreetingEmail(ctx, to, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGreetingEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendGreetingEmail), ctx, to, name)
}

// SendSignUpConfirmationEmail mocks base method.
func (m *MockNotificationsService) SendSignUpConfirmationEmail(ctx context.Context, to, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignUpConfirmationEmail", ctx, to, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSignUpConfirmationEmail indicates an expected call of SendSignUpConfirmationEmail.
func (mr *MockNotificationsServiceMockRecorder) SendSignUpConfirmationEmail(ctx, to, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignUpConfirmationEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendSignUpConfirmationEmail), ctx, to, otp)
}

// MockTelegramBotAPI is a mock of TelegramBotAPI interface.
type MockTelegramBotAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramBotAPIMockRecorder
	isgomock struct{}
}

// MockTelegramBotAPIMockRecorder is the mock recorder for MockTelegramBotAPI.
type MockTelegramBotAPIMockRecorder struct {
	mock *MockTelegramBotAPI
}

// NewMockTelegramBotAPI creates a new mock instance.
func NewMockTelegramBotAPI(ctrl *gomock.Controller) *MockTelegramBotAPI {
	mock := &MockTelegramBotAPI{ctrl: ctrl}
	mock.recorder = &MockTelegramBotAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramBotAPI) EXPECT() *MockTelegramBotAPIMockRecorder {
	return m.recorder
}

// SendTextMsg mocks base method.
func (m *MockTelegramBotAPI) SendTextMsg(ctx context.Context, chatId, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTextMsg", ctx, chatId, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTextMsg indicates an expected call of SendTextMsg.
func (mr *MockTelegramBotAPIMockRecorder) SendTextMsg(ctx, chatId, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextMsg", reflect.TypeOf((*MockTelegramBotAPI)(nil).SendTextMsg), ctx, chatId, text)
}

// MockGeoIPApi is a mock of GeoIPApi interface.
type MockGeoIPApi struct {
	ctrl     *gomock.Controller
	recorder *MockGeoIPApiMockRecorder
	isgomock struct{}
}

// MockGeoIPApiMockRecorder is the mock recorder for MockGeoIPApi.
type MockGeoIPApiMockRecorder struct {
	mock *MockGeoIPApi
}

// NewMockGeoIPApi creates a new mock instance.
func NewMockGeoIPApi(ctrl *gomock.Controller) *MockGeoIPApi {
	mock := &MockGeoIPApi{ctrl: ctrl}
	mock.recorder = &MockGeoIPApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoIPApi) EXPECT() *MockGeoIPApiMockRecorder {
	return m.recorder
}

// GetLocationByIP mocks base method.
func (m *MockGeoIPApi) GetLocationByIP(ip string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationByIP", ip)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByIP indicates an expected call of GetLocationByIP.
func (mr *MockGeoIPApiMockRecorder) GetLocationByIP(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByIP", reflect.TypeOf((*MockGeoIPApi)(nil).GetLocationByIP), ip)
}
