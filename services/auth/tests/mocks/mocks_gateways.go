// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=../../tests/mocks/mocks_gateways.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/modulix-systems/goose-talk/internal/entity"
	gateways "github.com/modulix-systems/goose-talk/internal/gateways"
	schemas "github.com/modulix-systems/goose-talk/internal/schemas"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
	isgomock struct{}
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// AddPasskeyCredential mocks base method.
func (m *MockUsersRepo) AddPasskeyCredential(ctx context.Context, userId int, cred *entity.PasskeyCredential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPasskeyCredential", ctx, userId, cred)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPasskeyCredential indicates an expected call of AddPasskeyCredential.
func (mr *MockUsersRepoMockRecorder) AddPasskeyCredential(ctx, userId, cred any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPasskeyCredential", reflect.TypeOf((*MockUsersRepo)(nil).AddPasskeyCredential), ctx, userId, cred)
}

// CheckExistsWithEmail mocks base method.
func (m *MockUsersRepo) CheckExistsWithEmail(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsWithEmail", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsWithEmail indicates an expected call of CheckExistsWithEmail.
func (mr *MockUsersRepoMockRecorder) CheckExistsWithEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsWithEmail", reflect.TypeOf((*MockUsersRepo)(nil).CheckExistsWithEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockUsersRepo) GetByID(ctx context.Context, id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsersRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersRepo)(nil).GetByID), ctx, id)
}

// GetByIDWithPasskeyCredentials mocks base method.
func (m *MockUsersRepo) GetByIDWithPasskeyCredentials(ctx context.Context, id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithPasskeyCredentials", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithPasskeyCredentials indicates an expected call of GetByIDWithPasskeyCredentials.
func (mr *MockUsersRepoMockRecorder) GetByIDWithPasskeyCredentials(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithPasskeyCredentials", reflect.TypeOf((*MockUsersRepo)(nil).GetByIDWithPasskeyCredentials), ctx, id)
}

// GetByLogin mocks base method.
func (m *MockUsersRepo) GetByLogin(ctx context.Context, login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUsersRepoMockRecorder) GetByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUsersRepo)(nil).GetByLogin), ctx, login)
}

// Insert mocks base method.
func (m *MockUsersRepo) Insert(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersRepoMockRecorder) Insert(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersRepo)(nil).Insert), ctx, user)
}

// UpdateIsActiveById mocks base method.
func (m *MockUsersRepo) UpdateIsActiveById(ctx context.Context, userId int, isActive bool) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsActiveById", ctx, userId, isActive)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIsActiveById indicates an expected call of UpdateIsActiveById.
func (mr *MockUsersRepoMockRecorder) UpdateIsActiveById(ctx, userId, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsActiveById", reflect.TypeOf((*MockUsersRepo)(nil).UpdateIsActiveById), ctx, userId, isActive)
}

// MockUserSessionsRepo is a mock of UserSessionsRepo interface.
type MockUserSessionsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserSessionsRepoMockRecorder
	isgomock struct{}
}

// MockUserSessionsRepoMockRecorder is the mock recorder for MockUserSessionsRepo.
type MockUserSessionsRepoMockRecorder struct {
	mock *MockUserSessionsRepo
}

// NewMockUserSessionsRepo creates a new mock instance.
func NewMockUserSessionsRepo(ctrl *gomock.Controller) *MockUserSessionsRepo {
	mock := &MockUserSessionsRepo{ctrl: ctrl}
	mock.recorder = &MockUserSessionsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSessionsRepo) EXPECT() *MockUserSessionsRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserSessionsRepo) Delete(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserSessionsRepoMockRecorder) Delete(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserSessionsRepo)(nil).Delete), ctx, ip)
}

// GetAllForUser mocks base method.
func (m *MockUserSessionsRepo) GetAllForUser(ctx context.Context, userId int, activeOnly bool) ([]entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", ctx, userId, activeOnly)
	ret0, _ := ret[0].([]entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser.
func (mr *MockUserSessionsRepoMockRecorder) GetAllForUser(ctx, userId, activeOnly any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*MockUserSessionsRepo)(nil).GetAllForUser), ctx, userId, activeOnly)
}

// GetById mocks base method.
func (m *MockUserSessionsRepo) GetById(ctx context.Context, sessionId string) (*entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, sessionId)
	ret0, _ := ret[0].(*entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserSessionsRepoMockRecorder) GetById(ctx, sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserSessionsRepo)(nil).GetById), ctx, sessionId)
}

// GetByParamsMatch mocks base method.
func (m *MockUserSessionsRepo) GetByParamsMatch(ctx context.Context, ip, deviceInfo string, userId int) (*entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParamsMatch", ctx, ip, deviceInfo, userId)
	ret0, _ := ret[0].(*entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByParamsMatch indicates an expected call of GetByParamsMatch.
func (mr *MockUserSessionsRepoMockRecorder) GetByParamsMatch(ctx, ip, deviceInfo, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParamsMatch", reflect.TypeOf((*MockUserSessionsRepo)(nil).GetByParamsMatch), ctx, ip, deviceInfo, userId)
}

// Insert mocks base method.
func (m *MockUserSessionsRepo) Insert(ctx context.Context, session *entity.UserSession) (*entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, session)
	ret0, _ := ret[0].(*entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUserSessionsRepoMockRecorder) Insert(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserSessionsRepo)(nil).Insert), ctx, session)
}

// UpdateById mocks base method.
func (m *MockUserSessionsRepo) UpdateById(ctx context.Context, sessionId string, payload *schemas.SessionUpdatePayload) (*entity.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, sessionId, payload)
	ret0, _ := ret[0].(*entity.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockUserSessionsRepoMockRecorder) UpdateById(ctx, sessionId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockUserSessionsRepo)(nil).UpdateById), ctx, sessionId, payload)
}

// UpdateForUserById mocks base method.
func (m *MockUserSessionsRepo) UpdateForUserById(ctx context.Context, userId int, sessionId string, deactivatedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForUserById", ctx, userId, sessionId, deactivatedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForUserById indicates an expected call of UpdateForUserById.
func (mr *MockUserSessionsRepoMockRecorder) UpdateForUserById(ctx, userId, sessionId, deactivatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForUserById", reflect.TypeOf((*MockUserSessionsRepo)(nil).UpdateForUserById), ctx, userId, sessionId, deactivatedAt)
}

// MockOtpRepo is a mock of OtpRepo interface.
type MockOtpRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOtpRepoMockRecorder
	isgomock struct{}
}

// MockOtpRepoMockRecorder is the mock recorder for MockOtpRepo.
type MockOtpRepoMockRecorder struct {
	mock *MockOtpRepo
}

// NewMockOtpRepo creates a new mock instance.
func NewMockOtpRepo(ctrl *gomock.Controller) *MockOtpRepo {
	mock := &MockOtpRepo{ctrl: ctrl}
	mock.recorder = &MockOtpRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpRepo) EXPECT() *MockOtpRepoMockRecorder {
	return m.recorder
}

// DeleteByEmailOrUserId mocks base method.
func (m *MockOtpRepo) DeleteByEmailOrUserId(ctx context.Context, email string, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByEmailOrUserId", ctx, email, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByEmailOrUserId indicates an expected call of DeleteByEmailOrUserId.
func (mr *MockOtpRepoMockRecorder) DeleteByEmailOrUserId(ctx, email, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByEmailOrUserId", reflect.TypeOf((*MockOtpRepo)(nil).DeleteByEmailOrUserId), ctx, email, userId)
}

// GetByEmail mocks base method.
func (m *MockOtpRepo) GetByEmail(ctx context.Context, email string) (*entity.OTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.OTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockOtpRepoMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockOtpRepo)(nil).GetByEmail), ctx, email)
}

// GetByUserId mocks base method.
func (m *MockOtpRepo) GetByUserId(ctx context.Context, userId int) (*entity.OTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].(*entity.OTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockOtpRepoMockRecorder) GetByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockOtpRepo)(nil).GetByUserId), ctx, userId)
}

// InsertOrUpdateCode mocks base method.
func (m *MockOtpRepo) InsertOrUpdateCode(ctx context.Context, otp *entity.OTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrUpdateCode", ctx, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrUpdateCode indicates an expected call of InsertOrUpdateCode.
func (mr *MockOtpRepoMockRecorder) InsertOrUpdateCode(ctx, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrUpdateCode", reflect.TypeOf((*MockOtpRepo)(nil).InsertOrUpdateCode), ctx, otp)
}

// MockLoginTokenRepo is a mock of LoginTokenRepo interface.
type MockLoginTokenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLoginTokenRepoMockRecorder
	isgomock struct{}
}

// MockLoginTokenRepoMockRecorder is the mock recorder for MockLoginTokenRepo.
type MockLoginTokenRepoMockRecorder struct {
	mock *MockLoginTokenRepo
}

// NewMockLoginTokenRepo creates a new mock instance.
func NewMockLoginTokenRepo(ctrl *gomock.Controller) *MockLoginTokenRepo {
	mock := &MockLoginTokenRepo{ctrl: ctrl}
	mock.recorder = &MockLoginTokenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginTokenRepo) EXPECT() *MockLoginTokenRepoMockRecorder {
	return m.recorder
}

// DeleteByClientId mocks base method.
func (m *MockLoginTokenRepo) DeleteByClientId(ctx context.Context, sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByClientId", ctx, sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByClientId indicates an expected call of DeleteByClientId.
func (mr *MockLoginTokenRepoMockRecorder) DeleteByClientId(ctx, sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByClientId", reflect.TypeOf((*MockLoginTokenRepo)(nil).DeleteByClientId), ctx, sessionId)
}

// GetByClientId mocks base method.
func (m *MockLoginTokenRepo) GetByClientId(ctx context.Context, sessionId string) (*entity.LoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClientId", ctx, sessionId)
	ret0, _ := ret[0].(*entity.LoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClientId indicates an expected call of GetByClientId.
func (mr *MockLoginTokenRepoMockRecorder) GetByClientId(ctx, sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClientId", reflect.TypeOf((*MockLoginTokenRepo)(nil).GetByClientId), ctx, sessionId)
}

// GetByValue mocks base method.
func (m *MockLoginTokenRepo) GetByValue(ctx context.Context, val string) (*entity.LoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByValue", ctx, val)
	ret0, _ := ret[0].(*entity.LoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByValue indicates an expected call of GetByValue.
func (mr *MockLoginTokenRepoMockRecorder) GetByValue(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByValue", reflect.TypeOf((*MockLoginTokenRepo)(nil).GetByValue), ctx, val)
}

// Insert mocks base method.
func (m *MockLoginTokenRepo) Insert(ctx context.Context, token *entity.LoginToken) (*entity.LoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, token)
	ret0, _ := ret[0].(*entity.LoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockLoginTokenRepoMockRecorder) Insert(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLoginTokenRepo)(nil).Insert), ctx, token)
}

// UpdateAuthSessionByClientId mocks base method.
func (m *MockLoginTokenRepo) UpdateAuthSessionByClientId(ctx context.Context, clientId, authSessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthSessionByClientId", ctx, clientId, authSessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthSessionByClientId indicates an expected call of UpdateAuthSessionByClientId.
func (mr *MockLoginTokenRepoMockRecorder) UpdateAuthSessionByClientId(ctx, clientId, authSessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthSessionByClientId", reflect.TypeOf((*MockLoginTokenRepo)(nil).UpdateAuthSessionByClientId), ctx, clientId, authSessionId)
}

// MockTwoFactorAuthRepo is a mock of TwoFactorAuthRepo interface.
type MockTwoFactorAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTwoFactorAuthRepoMockRecorder
	isgomock struct{}
}

// MockTwoFactorAuthRepoMockRecorder is the mock recorder for MockTwoFactorAuthRepo.
type MockTwoFactorAuthRepoMockRecorder struct {
	mock *MockTwoFactorAuthRepo
}

// NewMockTwoFactorAuthRepo creates a new mock instance.
func NewMockTwoFactorAuthRepo(ctrl *gomock.Controller) *MockTwoFactorAuthRepo {
	mock := &MockTwoFactorAuthRepo{ctrl: ctrl}
	mock.recorder = &MockTwoFactorAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwoFactorAuthRepo) EXPECT() *MockTwoFactorAuthRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockTwoFactorAuthRepo) Insert(ctx context.Context, ent *entity.TwoFactorAuth) (*entity.TwoFactorAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, ent)
	ret0, _ := ret[0].(*entity.TwoFactorAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTwoFactorAuthRepoMockRecorder) Insert(ctx, ent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTwoFactorAuthRepo)(nil).Insert), ctx, ent)
}

// UpdateContactForUser mocks base method.
func (m *MockTwoFactorAuthRepo) UpdateContactForUser(ctx context.Context, userId int, contact string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactForUser", ctx, userId, contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContactForUser indicates an expected call of UpdateContactForUser.
func (mr *MockTwoFactorAuthRepoMockRecorder) UpdateContactForUser(ctx, userId, contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactForUser", reflect.TypeOf((*MockTwoFactorAuthRepo)(nil).UpdateContactForUser), ctx, userId, contact)
}

// MockSecurityProvider is a mock of SecurityProvider interface.
type MockSecurityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityProviderMockRecorder
	isgomock struct{}
}

// MockSecurityProviderMockRecorder is the mock recorder for MockSecurityProvider.
type MockSecurityProviderMockRecorder struct {
	mock *MockSecurityProvider
}

// NewMockSecurityProvider creates a new mock instance.
func NewMockSecurityProvider(ctrl *gomock.Controller) *MockSecurityProvider {
	mock := &MockSecurityProvider{ctrl: ctrl}
	mock.recorder = &MockSecurityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityProvider) EXPECT() *MockSecurityProviderMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockSecurityProvider) ComparePasswords(hashed []byte, plain string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashed, plain)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockSecurityProviderMockRecorder) ComparePasswords(hashed, plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockSecurityProvider)(nil).ComparePasswords), hashed, plain)
}

// DecryptSymmetric mocks base method.
func (m *MockSecurityProvider) DecryptSymmetric(encrypted []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptSymmetric", encrypted)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptSymmetric indicates an expected call of DecryptSymmetric.
func (mr *MockSecurityProviderMockRecorder) DecryptSymmetric(encrypted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptSymmetric", reflect.TypeOf((*MockSecurityProvider)(nil).DecryptSymmetric), encrypted)
}

// EncryptSymmetric mocks base method.
func (m *MockSecurityProvider) EncryptSymmetric(plaintext string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptSymmetric", plaintext)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptSymmetric indicates an expected call of EncryptSymmetric.
func (mr *MockSecurityProviderMockRecorder) EncryptSymmetric(plaintext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptSymmetric", reflect.TypeOf((*MockSecurityProvider)(nil).EncryptSymmetric), plaintext)
}

// GenerateOTPCode mocks base method.
func (m *MockSecurityProvider) GenerateOTPCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOTPCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateOTPCode indicates an expected call of GenerateOTPCode.
func (mr *MockSecurityProviderMockRecorder) GenerateOTPCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOTPCode", reflect.TypeOf((*MockSecurityProvider)(nil).GenerateOTPCode))
}

// GenerateSecretTokenUrlSafe mocks base method.
func (m *MockSecurityProvider) GenerateSecretTokenUrlSafe(entropy int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSecretTokenUrlSafe", entropy)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateSecretTokenUrlSafe indicates an expected call of GenerateSecretTokenUrlSafe.
func (mr *MockSecurityProviderMockRecorder) GenerateSecretTokenUrlSafe(entropy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSecretTokenUrlSafe", reflect.TypeOf((*MockSecurityProvider)(nil).GenerateSecretTokenUrlSafe), entropy)
}

// GenerateSessionId mocks base method.
func (m *MockSecurityProvider) GenerateSessionId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSessionId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateSessionId indicates an expected call of GenerateSessionId.
func (mr *MockSecurityProviderMockRecorder) GenerateSessionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSessionId", reflect.TypeOf((*MockSecurityProvider)(nil).GenerateSessionId))
}

// GenerateTOTPEnrollUrlWithSecret mocks base method.
func (m *MockSecurityProvider) GenerateTOTPEnrollUrlWithSecret(accName string) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTOTPEnrollUrlWithSecret", accName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GenerateTOTPEnrollUrlWithSecret indicates an expected call of GenerateTOTPEnrollUrlWithSecret.
func (mr *MockSecurityProviderMockRecorder) GenerateTOTPEnrollUrlWithSecret(accName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTOTPEnrollUrlWithSecret", reflect.TypeOf((*MockSecurityProvider)(nil).GenerateTOTPEnrollUrlWithSecret), accName)
}

// HashPassword mocks base method.
func (m *MockSecurityProvider) HashPassword(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockSecurityProviderMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockSecurityProvider)(nil).HashPassword), password)
}

// ValidateTOTP mocks base method.
func (m *MockSecurityProvider) ValidateTOTP(code, secret string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTOTP", code, secret)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateTOTP indicates an expected call of ValidateTOTP.
func (mr *MockSecurityProviderMockRecorder) ValidateTOTP(code, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTOTP", reflect.TypeOf((*MockSecurityProvider)(nil).ValidateTOTP), code, secret)
}

// MockKeyValueStorage is a mock of KeyValueStorage interface.
type MockKeyValueStorage struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStorageMockRecorder
	isgomock struct{}
}

// MockKeyValueStorageMockRecorder is the mock recorder for MockKeyValueStorage.
type MockKeyValueStorageMockRecorder struct {
	mock *MockKeyValueStorage
}

// NewMockKeyValueStorage creates a new mock instance.
func NewMockKeyValueStorage(ctrl *gomock.Controller) *MockKeyValueStorage {
	mock := &MockKeyValueStorage{ctrl: ctrl}
	mock.recorder = &MockKeyValueStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStorage) EXPECT() *MockKeyValueStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeyValueStorage) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueStorageMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueStorage)(nil).Get), key)
}

// Set mocks base method.
func (m *MockKeyValueStorage) Set(key, value string, expiresIn time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiresIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKeyValueStorageMockRecorder) Set(key, value, expiresIn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeyValueStorage)(nil).Set), key, value, expiresIn)
}

// MockWebAuthnProvider is a mock of WebAuthnProvider interface.
type MockWebAuthnProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWebAuthnProviderMockRecorder
	isgomock struct{}
}

// MockWebAuthnProviderMockRecorder is the mock recorder for MockWebAuthnProvider.
type MockWebAuthnProviderMockRecorder struct {
	mock *MockWebAuthnProvider
}

// NewMockWebAuthnProvider creates a new mock instance.
func NewMockWebAuthnProvider(ctrl *gomock.Controller) *MockWebAuthnProvider {
	mock := &MockWebAuthnProvider{ctrl: ctrl}
	mock.recorder = &MockWebAuthnProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebAuthnProvider) EXPECT() *MockWebAuthnProviderMockRecorder {
	return m.recorder
}

// GenerateRegistrationOptions mocks base method.
func (m *MockWebAuthnProvider) GenerateRegistrationOptions(user *entity.User) (gateways.WebAuthnRegistrationOptions, *gateways.PasskeyTmpSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRegistrationOptions", user)
	ret0, _ := ret[0].(gateways.WebAuthnRegistrationOptions)
	ret1, _ := ret[1].(*gateways.PasskeyTmpSession)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateRegistrationOptions indicates an expected call of GenerateRegistrationOptions.
func (mr *MockWebAuthnProviderMockRecorder) GenerateRegistrationOptions(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRegistrationOptions", reflect.TypeOf((*MockWebAuthnProvider)(nil).GenerateRegistrationOptions), user)
}

// VerifyRegistrationOptions mocks base method.
func (m *MockWebAuthnProvider) VerifyRegistrationOptions(userId int, rawCredential []byte, prevSession *gateways.PasskeyTmpSession) (*entity.PasskeyCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRegistrationOptions", userId, rawCredential, prevSession)
	ret0, _ := ret[0].(*entity.PasskeyCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRegistrationOptions indicates an expected call of VerifyRegistrationOptions.
func (mr *MockWebAuthnProviderMockRecorder) VerifyRegistrationOptions(userId, rawCredential, prevSession any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRegistrationOptions", reflect.TypeOf((*MockWebAuthnProvider)(nil).VerifyRegistrationOptions), userId, rawCredential, prevSession)
}

// MockNotificationsService is a mock of NotificationsService interface.
type MockNotificationsService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsServiceMockRecorder
	isgomock struct{}
}

// MockNotificationsServiceMockRecorder is the mock recorder for MockNotificationsService.
type MockNotificationsServiceMockRecorder struct {
	mock *MockNotificationsService
}

// NewMockNotificationsService creates a new mock instance.
func NewMockNotificationsService(ctrl *gomock.Controller) *MockNotificationsService {
	mock := &MockNotificationsService{ctrl: ctrl}
	mock.recorder = &MockNotificationsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsService) EXPECT() *MockNotificationsServiceMockRecorder {
	return m.recorder
}

// Send2FAEmail mocks base method.
func (m *MockNotificationsService) Send2FAEmail(ctx context.Context, to, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send2FAEmail", ctx, to, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send2FAEmail indicates an expected call of Send2FAEmail.
func (mr *MockNotificationsServiceMockRecorder) Send2FAEmail(ctx, to, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send2FAEmail", reflect.TypeOf((*MockNotificationsService)(nil).Send2FAEmail), ctx, to, otp)
}

// SendAccDeactivationEmail mocks base method.
func (m *MockNotificationsService) SendAccDeactivationEmail(ctx context.Context, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAccDeactivationEmail", ctx, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAccDeactivationEmail indicates an expected call of SendAccDeactivationEmail.
func (mr *MockNotificationsServiceMockRecorder) SendAccDeactivationEmail(ctx, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAccDeactivationEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendAccDeactivationEmail), ctx, to)
}

// SendGreetingEmail mocks base method.
func (m *MockNotificationsService) SendGreetingEmail(ctx context.Context, to, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGreetingEmail", ctx, to, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendGreetingEmail indicates an expected call of SendGreetingEmail.
func (mr *MockNotificationsServiceMockRecorder) SendGreetingEmail(ctx, to, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGreetingEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendGreetingEmail), ctx, to, name)
}

// SendSignInNewDeviceEmail mocks base method.
func (m *MockNotificationsService) SendSignInNewDeviceEmail(ctx context.Context, to string, newSession *entity.UserSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignInNewDeviceEmail", ctx, to, newSession)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSignInNewDeviceEmail indicates an expected call of SendSignInNewDeviceEmail.
func (mr *MockNotificationsServiceMockRecorder) SendSignInNewDeviceEmail(ctx, to, newSession any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignInNewDeviceEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendSignInNewDeviceEmail), ctx, to, newSession)
}

// SendSignUpConfirmationEmail mocks base method.
func (m *MockNotificationsService) SendSignUpConfirmationEmail(ctx context.Context, to, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSignUpConfirmationEmail", ctx, to, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSignUpConfirmationEmail indicates an expected call of SendSignUpConfirmationEmail.
func (mr *MockNotificationsServiceMockRecorder) SendSignUpConfirmationEmail(ctx, to, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignUpConfirmationEmail", reflect.TypeOf((*MockNotificationsService)(nil).SendSignUpConfirmationEmail), ctx, to, otp)
}

// MockTelegramBotAPI is a mock of TelegramBotAPI interface.
type MockTelegramBotAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramBotAPIMockRecorder
	isgomock struct{}
}

// MockTelegramBotAPIMockRecorder is the mock recorder for MockTelegramBotAPI.
type MockTelegramBotAPIMockRecorder struct {
	mock *MockTelegramBotAPI
}

// NewMockTelegramBotAPI creates a new mock instance.
func NewMockTelegramBotAPI(ctrl *gomock.Controller) *MockTelegramBotAPI {
	mock := &MockTelegramBotAPI{ctrl: ctrl}
	mock.recorder = &MockTelegramBotAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramBotAPI) EXPECT() *MockTelegramBotAPIMockRecorder {
	return m.recorder
}

// GetLatestMsg mocks base method.
func (m *MockTelegramBotAPI) GetLatestMsg(ctx context.Context) (*gateways.TelegramMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestMsg", ctx)
	ret0, _ := ret[0].(*gateways.TelegramMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMsg indicates an expected call of GetLatestMsg.
func (mr *MockTelegramBotAPIMockRecorder) GetLatestMsg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMsg", reflect.TypeOf((*MockTelegramBotAPI)(nil).GetLatestMsg), ctx)
}

// GetStartLinkWithCode mocks base method.
func (m *MockTelegramBotAPI) GetStartLinkWithCode(code string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartLinkWithCode", code)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStartLinkWithCode indicates an expected call of GetStartLinkWithCode.
func (mr *MockTelegramBotAPIMockRecorder) GetStartLinkWithCode(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartLinkWithCode", reflect.TypeOf((*MockTelegramBotAPI)(nil).GetStartLinkWithCode), code)
}

// SendTextMsg mocks base method.
func (m *MockTelegramBotAPI) SendTextMsg(ctx context.Context, chatId, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTextMsg", ctx, chatId, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTextMsg indicates an expected call of SendTextMsg.
func (mr *MockTelegramBotAPIMockRecorder) SendTextMsg(ctx, chatId, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextMsg", reflect.TypeOf((*MockTelegramBotAPI)(nil).SendTextMsg), ctx, chatId, text)
}

// MockGeoIPApi is a mock of GeoIPApi interface.
type MockGeoIPApi struct {
	ctrl     *gomock.Controller
	recorder *MockGeoIPApiMockRecorder
	isgomock struct{}
}

// MockGeoIPApiMockRecorder is the mock recorder for MockGeoIPApi.
type MockGeoIPApiMockRecorder struct {
	mock *MockGeoIPApi
}

// NewMockGeoIPApi creates a new mock instance.
func NewMockGeoIPApi(ctrl *gomock.Controller) *MockGeoIPApi {
	mock := &MockGeoIPApi{ctrl: ctrl}
	mock.recorder = &MockGeoIPApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoIPApi) EXPECT() *MockGeoIPApiMockRecorder {
	return m.recorder
}

// GetLocationByIP mocks base method.
func (m *MockGeoIPApi) GetLocationByIP(ip string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationByIP", ip)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByIP indicates an expected call of GetLocationByIP.
func (mr *MockGeoIPApiMockRecorder) GetLocationByIP(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByIP", reflect.TypeOf((*MockGeoIPApi)(nil).GetLocationByIP), ip)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
}

// MockTransactionsManager is a mock of TransactionsManager interface.
type MockTransactionsManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsManagerMockRecorder
	isgomock struct{}
}

// MockTransactionsManagerMockRecorder is the mock recorder for MockTransactionsManager.
type MockTransactionsManagerMockRecorder struct {
	mock *MockTransactionsManager
}

// NewMockTransactionsManager creates a new mock instance.
func NewMockTransactionsManager(ctrl *gomock.Controller) *MockTransactionsManager {
	mock := &MockTransactionsManager{ctrl: ctrl}
	mock.recorder = &MockTransactionsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsManager) EXPECT() *MockTransactionsManagerMockRecorder {
	return m.recorder
}

// StartTransaction mocks base method.
func (m *MockTransactionsManager) StartTransaction(ctx context.Context) (gateways.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(gateways.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionsManagerMockRecorder) StartTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionsManager)(nil).StartTransaction), ctx)
}
