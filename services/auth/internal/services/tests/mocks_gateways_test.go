// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=../services/tests/mocks_gateways_test.go -package=services_test
//

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/modulix-systems/goose-talk/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
	isgomock struct{}
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockUsersRepo) Insert(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersRepoMockRecorder) Insert(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersRepo)(nil).Insert), ctx, user)
}

// MockSignUpCodeRepo is a mock of SignUpCodeRepo interface.
type MockSignUpCodeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpCodeRepoMockRecorder
	isgomock struct{}
}

// MockSignUpCodeRepoMockRecorder is the mock recorder for MockSignUpCodeRepo.
type MockSignUpCodeRepoMockRecorder struct {
	mock *MockSignUpCodeRepo
}

// NewMockSignUpCodeRepo creates a new mock instance.
func NewMockSignUpCodeRepo(ctrl *gomock.Controller) *MockSignUpCodeRepo {
	mock := &MockSignUpCodeRepo{ctrl: ctrl}
	mock.recorder = &MockSignUpCodeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpCodeRepo) EXPECT() *MockSignUpCodeRepoMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockSignUpCodeRepo) GetByEmail(ctx context.Context, email string) (*entity.SignUpCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.SignUpCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockSignUpCodeRepoMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockSignUpCodeRepo)(nil).GetByEmail), ctx, email)
}

// MockTotpProvider is a mock of TotpProvider interface.
type MockTotpProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTotpProviderMockRecorder
	isgomock struct{}
}

// MockTotpProviderMockRecorder is the mock recorder for MockTotpProvider.
type MockTotpProviderMockRecorder struct {
	mock *MockTotpProvider
}

// NewMockTotpProvider creates a new mock instance.
func NewMockTotpProvider(ctrl *gomock.Controller) *MockTotpProvider {
	mock := &MockTotpProvider{ctrl: ctrl}
	mock.recorder = &MockTotpProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTotpProvider) EXPECT() *MockTotpProviderMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTotpProvider) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockTotpProviderMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTotpProvider)(nil).Generate))
}

// MockAuthTokenProvider is a mock of AuthTokenProvider interface.
type MockAuthTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTokenProviderMockRecorder
	isgomock struct{}
}

// MockAuthTokenProviderMockRecorder is the mock recorder for MockAuthTokenProvider.
type MockAuthTokenProviderMockRecorder struct {
	mock *MockAuthTokenProvider
}

// NewMockAuthTokenProvider creates a new mock instance.
func NewMockAuthTokenProvider(ctrl *gomock.Controller) *MockAuthTokenProvider {
	mock := &MockAuthTokenProvider{ctrl: ctrl}
	mock.recorder = &MockAuthTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthTokenProvider) EXPECT() *MockAuthTokenProviderMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockAuthTokenProvider) NewToken(expires time.Duration, claims map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", expires, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockAuthTokenProviderMockRecorder) NewToken(expires, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockAuthTokenProvider)(nil).NewToken), expires, claims)
}

// ParseClaimsFromToken mocks base method.
func (m *MockAuthTokenProvider) ParseClaimsFromToken(token string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaimsFromToken", token)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaimsFromToken indicates an expected call of ParseClaimsFromToken.
func (mr *MockAuthTokenProviderMockRecorder) ParseClaimsFromToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaimsFromToken", reflect.TypeOf((*MockAuthTokenProvider)(nil).ParseClaimsFromToken), token)
}
